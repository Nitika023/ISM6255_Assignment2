/* 
 
YOU ARE NOT ALLOWED TO MODIFY ANY FUNCTION DEFINATION's PROVIDED.
WRITE YOUR CODE IN THE RESPECTIVE QUESTION FUNCTION BLOCK


*/

using System.Diagnostics;
using System.Text;

namespace ISM6225_Fall_2023_Assignment_2
{
    class Program
    {
        static void Main(string[] args)
        {
            //Question 1:
            Console.WriteLine("Question 1:");
            int[] nums1 = { 0, 1, 3, 50, 75 };
            int upper = 99, lower = 0;
            IList<IList<int>> missingRanges = FindMissingRanges(nums1, lower, upper);
            string result = ConvertIListToNestedList(missingRanges);
            Console.WriteLine(result);
            Console.WriteLine();
            Console.WriteLine();

            //Question2:
            Console.WriteLine("Question 2");
            string parenthesis = "()[]{}";
            bool isValidParentheses = IsValid(parenthesis);
            Console.WriteLine(isValidParentheses);
            Console.WriteLine();
            Console.WriteLine();

            //Question 3:
            Console.WriteLine("Question 3");
            int[] prices_array = { 7, 1, 5, 3, 6, 4 };
            int max_profit = MaxProfit(prices_array);
            Console.WriteLine(max_profit);
            Console.WriteLine();
            Console.WriteLine();

            //Question 4:
            Console.WriteLine("Question 4");
            string s1 = "69";
            bool IsStrobogrammaticNumber = IsStrobogrammatic(s1);
            Console.WriteLine(IsStrobogrammaticNumber);
            Console.WriteLine();
            Console.WriteLine();

            //Question 5:
            Console.WriteLine("Question 5");
            int[] numbers = { 1, 2, 3, 1, 1, 3 };
            int noOfPairs = NumIdenticalPairs(numbers);
            Console.WriteLine(noOfPairs);
            Console.WriteLine();
            Console.WriteLine();

            //Question 6:
            Console.WriteLine("Question 6");
            int[] maximum_numbers = { 3, 2, 1 };
            int third_maximum_number = ThirdMax(maximum_numbers);
            Console.WriteLine(third_maximum_number);
            Console.WriteLine();
            Console.WriteLine();

            //Question 7:
            Console.WriteLine("Question 7:");
            string currentState = "++++";
            IList<string> combinations = GeneratePossibleNextMoves(currentState);
            string combinationsString = ConvertIListToArray(combinations);
            Console.WriteLine(combinationsString);
            Console.WriteLine();
            Console.WriteLine();

            //Question 8:
            Console.WriteLine("Question 8:");
            string longString = "leetcodeisacommunityforcoders";
            string longStringAfterVowels = RemoveVowels(longString);
            Console.WriteLine(longStringAfterVowels);
            Console.WriteLine();
            Console.WriteLine();
        }

        /*
        
        Question 1:
        You are given an inclusive range [lower, upper] and a sorted unique integer array nums, where all elements are within the inclusive range. A number x is considered missing if x is in the range [lower, upper] and x is not in nums. Return the shortest sorted list of ranges that exactly covers all the missing numbers. That is, no element of nums is included in any of the ranges, and each missing number is covered by one of the ranges.
        Example 1:
        Input: nums = [0,1,3,50,75], lower = 0, upper = 99
        Output: [[2,2],[4,49],[51,74],[76,99]]  
        Explanation: The ranges are:
        [2,2]
        [4,49]
        [51,74]
        [76,99]
        Example 2:
        Input: nums = [-1], lower = -1, upper = -1
        Output: []
        Explanation: There are no missing ranges since there are no missing numbers.

        Constraints:
        -109 <= lower <= upper <= 109
        0 <= nums.length <= 100
        lower <= nums[i] <= upper
        All the values of nums are unique.

        Time complexity: O(n), space complexity:O(1)
        */

        /* Please note that since this function expects a return type of IList it cannot run in the specified
        namespace complexity of O(1), to achieve that we would require a constant return which is not possible
        in this scenario. The space complexity of the program written below is O(n)
        */
        public static IList<IList<int>> FindMissingRanges(int[] nums, int lower, int upper)
        {
            if (nums == null || nums.Length == 0)
            {
                throw new ArgumentException("Input array is null or empty."); // Expecting a not null/empty input Array
            }

            int n = nums.Length; // Get the number of elements in the 'nums' array.
            List<IList<int>> ans = new List<IList<int>>(); // Initialize a list to store missing ranges.

            if (n == 0)
            {
                // If the 'nums' array is empty, add a single range from 'lower' to 'upper' to cover all possible missing numbers.
                ans.Add(new List<int> { lower, upper });
            }

            if (nums[0] > lower)
            {
                // If the first element in 'nums' is greater than 'lower', add a range from 'lower' to 'nums[0] - 1' to cover missing numbers.
                ans.Add(new List<int> { lower, nums[0] - 1 });
            }

            for (int i = 1; i < n; i++)
            {
                // Iterate through the elements in 'nums'.

                if (nums[i] - nums[i - 1] > 1)
                {
                    // If there is a gap between the current element and the previous element greater than 1, add a range to cover missing numbers.
                    ans.Add(new List<int> { nums[i - 1] + 1, nums[i] - 1 });
                }
            }

            if (nums[n - 1] < upper)
            {
                // If the last element in 'nums' is less than 'upper', add a range from 'nums[n - 1] + 1' to 'upper' to cover missing numbers.
                ans.Add(new List<int> { nums[n - 1] + 1, upper });
            }

            return ans; // Return the list of missing ranges.
        }

        /*
         
        Question 2

        Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.An input string is valid if:
        Open brackets must be closed by the same type of brackets.
        Open brackets must be closed in the correct order.
        Every close bracket has a corresponding open bracket of the same type.
 
        Example 1:

        Input: s = "()"
        Output: true
        Example 2:

        Input: s = "()[]{}"
        Output: true
        Example 3:

        Input: s = "(]"
        Output: false

        Constraints:

        1 <= s.length <= 104
        s consists of parentheses only '()[]{}'.

        Time complexity:O(n^2), space complexity:O(1)
        */

        public static bool IsValid(string s)
        {
            if (string.IsNullOrEmpty(s))
            {
                throw new ArgumentException("Input String is null or empty."); // Expecting a not null/empty String
            }


            while (s.Contains("()") || s.Contains("{}") || s.Contains("[]"))
            {
                // Continue to remove valid bracket pairs until none are left.
                s = s.Replace("()", "");
                s = s.Replace("{}", "");
                s = s.Replace("[]","");
                Console.WriteLine(s); // (Optional) Log the intermediate steps for debugging or visualization.
            }

            if (s.Length == 0)
            {
                // If the string becomes empty after removing all valid pairs, it's a valid string.
                return true;
            }
            else
            {
                // If any unpaired brackets remain, the string is invalid.
                return false;
            }

        }

        /*

        Question 3:
        You are given an array prices where prices[i] is the price of a given stock on the ith day.You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.
        Example 1:
        Input: prices = [7,1,5,3,6,4]
        Output: 5
        Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
        Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.

        Example 2:
        Input: prices = [7,6,4,3,1]
        Output: 0
        Explanation: In this case, no transactions are done and the max profit = 0.
 
        Constraints:
        1 <= prices.length <= 105
        0 <= prices[i] <= 104

        Time complexity: O(n), space complexity:O(1)
        */

        public static int MaxProfit(int[] prices)
        {
            int max = 0;      // Initialize the maximum profit to 0.
            int min = prices[0];  // Initialize the minimum price to the first price in the array.

            if (prices == null || prices.Length == 0)
            {
                return max; // Input Array of prices is null or empty returning 0 as max profit
            }

            // Iterate through the prices array starting from the second element (index 1).
            for (int i = 1; i < prices.Length; i++)
            {
                if (prices[i] < min)
                {
                    // If the current price is lower than the minimum price seen so far,
                    // update the minimum price.
                    min = prices[i];
                }
                else if ((prices[i] - min) > max)
                {
                    // If the current price minus the minimum price is greater than the
                    // maximum profit seen so far, update the maximum profit.
                    max = prices[i] - min;
                }
            }
            // After iterating through the entire array, max contains the maximum profit.
            return max;

        }


        /*
        
        Question 4:
        Given a string num which represents an integer, return true if num is a strobogrammatic number.A strobogrammatic number is a number that looks the same when rotated 180 degrees (looked at upside down).
        Example 1:

        Input: num = "69"
        Output: true
        Example 2:

        Input: num = "88"
        Output: true
        Example 3:

        Input: num = "962"
        Output: false

        Constraints:
        1 <= num.length <= 50
        num consists of only digits.
        num does not contain any leading zeros except for zero itself.

        Time complexity:O(n), space complexity:O(1)
        */

        public static bool IsStrobogrammatic(string s)
        {
            if (string.IsNullOrEmpty(s))
            {
                return false;
            }

            // Define a dictionary to map valid strobogrammatic digits.
            Dictionary<char, char> strobogrammaticDigits = new Dictionary<char, char>
            {
                { '0', '0' },
                { '1', '1' },
                { '6', '9' },
                { '8', '8' },
                { '9', '6' }
            };

            int left = 0;
            int right = s.Length - 1;

            while (left <= right)
            {
                // Check if the left and right digits are valid strobogrammatic pairs.
                if (!strobogrammaticDigits.ContainsKey(s[left]) || strobogrammaticDigits[s[left]] != s[right])
                {
                    return false;
                }

                left++;
                right--;
            }

            return true; // If we reach this point, all pairs are strobogrammatic.

        }

        /*

        Question 5:
        Given an array of integers nums, return the number of good pairs.A pair (i, j) is called good if nums[i] == nums[j] and i < j. 

        Example 1:

        Input: nums = [1,2,3,1,1,3]
        Output: 4
        Explanation: There are 4 good pairs (0,3), (0,4), (3,4), (2,5) 0-indexed.
        Example 2:

        Input: nums = [1,1,1,1]
        Output: 6
        Explanation: Each pair in the array are good.
        Example 3:

        Input: nums = [1,2,3]
        Output: 0

        Constraints:

        1 <= nums.length <= 100
        1 <= nums[i] <= 100

        Time complexity:O(n), space complexity:O(n)

        */

        public static int NumIdenticalPairs(int[] nums)
        {
            int ans = 0; // Initialize the answer counter.
            if (nums == null || nums.Length == 0)
            {
                return ans; // Expecting a not null/empty array
            }

            try
            {
                // Create a Dictionary to store the count of each number.
                Dictionary<int, int> numberCount = new Dictionary<int, int>();

                foreach (int number in nums)
                {
                    if (numberCount.ContainsKey(number))
                    {
                        int friendCount = numberCount[number]; // Get the count of the current number from the Dictionary.
                        ans += friendCount; // Add the count to the answer since they form pairs.
                        numberCount[number] = friendCount + 1; // Update the count for the current number.
                    }
                    else
                    {
                        numberCount[number] = 1; // If the number is not in the Dictionary, add them with a count of 1.
                    }
                }
            }
            catch (Exception)
            {
                throw;
            }

            return ans; // Return the total number of identical pairs.
        }

        /*
        Question 6

        Given an integer array nums, return the third distinct maximum number in this array. If the third maximum does not exist, return the maximum number.

        Example 1:

        Input: nums = [3,2,1]
        Output: 1
        Explanation:
        The first distinct maximum is 3.
        The second distinct maximum is 2.
        The third distinct maximum is 1.
        Example 2:

        Input: nums = [1,2]
        Output: 2
        Explanation:
        The first distinct maximum is 2.
        The second distinct maximum is 1.
        The third distinct maximum does not exist, so the maximum (2) is returned instead.
        Example 3:

        Input: nums = [2,2,3,1]
        Output: 1
        Explanation:
        The first distinct maximum is 3.
        The second distinct maximum is 2 (both 2's are counted together since they have the same value).
        The third distinct maximum is 1.
        Constraints:

        1 <= nums.length <= 104
        -231 <= nums[i] <= 231 - 1

        Time complexity:O(nlogn), space complexity:O(n)
        */

        public static int ThirdMax(int[] nums)
        {
            if (nums == null || nums.Length == 0)
            {
                throw new ArgumentException("Input array is null or empty."); // Expecting a not null/empty array
            }
            try
            {
                // Step 1: Sort the array in ascending order.
                Array.Sort(nums);

                int distinctMaxCount = 0;
                int currentMax = nums[nums.Length - 1]; // Initialize with the maximum number.

                // Step 2: Iterate through the sorted array in reverse order.
                for (int i = nums.Length - 2; i >= 0; i--)
                {
                    // Step 3: Check if the current number is smaller than the current maximum.
                    if (nums[i] < currentMax)
                    {
                        currentMax = nums[i]; // Update the current maximum.
                        distinctMaxCount++;   // Increment the count of distinct maximum values.
                    }

                    // Step 4: If we've found the third distinct maximum, return it.
                    if (distinctMaxCount == 2)
                        return currentMax;
                }

                // Step 5: If the third distinct maximum doesn't exist, return the maximum number.
                return nums[nums.Length - 1];
            }
            catch (Exception)
            {
                throw;
            }
        }

        /*
        
        Question 7:

        You are playing a Flip Game with your friend. You are given a string currentState that contains only '+' and '-'. You and your friend take turns to flip two consecutive "++" into "--". The game ends when a person can no longer make a move, and therefore the other person will be the winner.Return all possible states of the string currentState after one valid move. You may return the answer in any order. If there is no valid move, return an empty list [].
        Example 1:
        Input: currentState = "++++"
        Output: ["--++","+--+","++--"]
        Example 2:

        Input: currentState = "+"
        Output: []
 
        Constraints:
        1 <= currentState.length <= 500
        currentState[i] is either '+' or '-'.

        Timecomplexity:O(n), Space complexity:O(n)
        */

        /** the time complexity of the function below is O(n) because we iterate over the input only once. */
        public static IList<string> GeneratePossibleNextMoves(string currentState)
        {
            List<string> possibleStates = new List<string>(); // Create a list to store possible next states.
            if (string.IsNullOrEmpty(currentState))
            {
                return possibleStates; // Return empty List for empty or null input strings.
            }
            try
            {



                // Iterate through the input string, stopping at the second-to-last character.
                for (int i = 0; i < currentState.Length - 1; i++)
                {
                    // Check if the current substring of two characters is "++".
                    if (currentState.Substring(i, 2) == "++")
                    {
                        // Create a new string by replacing "++" with "--" and add it to the list of possible states.
                        string newState = currentState.Substring(0, i) + "--" + currentState.Substring(i + 2);
                        possibleStates.Add(newState);
                    }
                }



            }
            catch (Exception)
            {
                throw;
            }

            return possibleStates; // Return the list of possible next states.
        }

        /*

        Question 8:

        Given a string s, remove the vowels 'a', 'e', 'i', 'o', and 'u' from it, and return the new string.
        Example 1:

        Input: s = "leetcodeisacommunityforcoders"
        Output: "ltcdscmmntyfrcdrs"

        Example 2:

        Input: s = "saeiou"
        Output: ""

        Timecomplexity:O(n), Space complexity:O(n)
        */

        /** 
         
		This function has a time complexity of O(n) because each character in the String is accessed once. 
		The space complexity is also O(n) because we are storing the result in a separate String Builder and in the worst case 
        The string returned will be same as the input String.

        */
        public static string RemoveVowels(string s)
        {
            if (string.IsNullOrEmpty(s))
            {
                return s; // Return the input string as-is for null or empty input.
            }
            /**
            Strings in C# are immutable, meaning each time you modify a string, a new string object is created.
            When you concatenate strings using the + operator in a loop, it can lead to the creation of multiple intermediate string objects,
            which can be inefficient and memory-consuming for large operations. StringBuilder, on the other hand, efficiently modifies a single string
            */
            StringBuilder resultString = new StringBuilder();
            HashSet<char> vowels = new HashSet<char>(new char[] { 'a', 'e', 'i', 'o', 'u' });

            // Looping over each character in the given string using foreach
            foreach (char c in s)
            {
                if (!vowels.Contains(c) && !vowels.Contains(char.ToLower(c))) // checking if the character is a vowel, the check is also done for upper case Characters which may be vowels.
                {
                    resultString.Append(c);
                }
            }

            return resultString.ToString();  //returning the result 
        }

        /* Inbuilt Functions - Don't Change the below functions */
        static string ConvertIListToNestedList(IList<IList<int>> input)
        {

            StringBuilder sb = new StringBuilder();

            sb.Append("["); // Add the opening square bracket for the outer list

            for (int i = 0; i < input.Count; i++)
            {
                IList<int> innerList = input[i];
                sb.Append("[" + string.Join(",", innerList) + "]");

                // Add a comma unless it's the last inner list
                if (i < input.Count - 1)
                {
                    sb.Append(",");
                }
            }

            sb.Append("]"); // Add the closing square bracket for the outer list

            return sb.ToString();
        }


        static string ConvertIListToArray(IList<string> input)
        {
            // Create an array to hold the strings in input
            string[] strArray = new string[input.Count];

            for (int i = 0; i < input.Count; i++)
            {
                strArray[i] = "\"" + input[i] + "\""; // Enclose each string in double quotes
            }

            // Join the strings in strArray with commas and enclose them in square brackets
            string result = "[" + string.Join(",", strArray) + "]";

            return result;
        }
    }
}
